services:
  prometheus-app:
    image: prom/prometheus:latest
    restart: unless-stopped
    container_name: prometheus-observer
    ports:
      - 9090:9090
    volumes:
      - ./configs/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    container_name: grafana-observer
    restart: unless-stopped
    depends_on:
      - prometheus-app
      - loki-app
    ports:
      - 3000:3000
    volumes:
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - monitoring

  loki-app:
    image: grafana/loki:latest
    container_name: loki-observer
    restart: unless-stopped
    ports:
      - 3100:3100
    volumes:
      - ./configs/loki/config.yaml:/etc/loki/config.yaml
    networks:
      - monitoring

  promtail-app:
    image: grafana/promtail:latest
    container_name: promtail-observer
    restart: unless-stopped
    volumes:
      - ./configs/promtail/config.yaml:/etc/promtail/config.yaml # Mount the Promtail config file
      - /var/run/docker.sock:/var/run/docker.sock # Mount the Docker socket
    command: ["-config.file=/etc/promtail/config.yaml"]
    depends_on:
      # Ensure loki is available before promtail starts
      - loki-app
    networks:
      - monitoring

  the-app:
    build: . # Instructs Docker Compose to build the image using the Dockerfile in the current directory
    container_name: the-app
    restart: unless-stopped
    ports:
      - "8089:8089" # Map host port 8089 to container port 8089 (where uvicorn runs)
    networks:
      - monitoring # Add the app to the monitoring network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./configs/otel-collection-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver
    networks:
      - monitoring
    depends_on:
      - tempo

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    restart: unless-stopped
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./configs/tempo/tempo.yaml:/etc/tempo.yaml
      # - ./tempo-data:/tmp/tempo # Optional: Persist data
    ports:
      - "3200:3200" # Tempo UI
      - "4317" # OTLP gRPC. Port is mapped by otel-collector
    networks:
      - monitoring

networks:
  monitoring:
    external: true # Use the external network created earlier
